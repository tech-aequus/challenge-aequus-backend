generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                  String          @id @default(uuid())
  email                               String          @unique
  createdAt                           DateTime        @default(now())
  updatedAt                           DateTime        @updatedAt
  generatedPassword                   String?
  emailVerified                       DateTime?
  image                               String?
  role                                String          @default("user")
  password                            String?
  name                                String          @unique
  coins                               Int             @default(0)
  isVerified                          Boolean         @default(false)
  isAdmin                             Boolean         @default(false)
  xp                                  Int             @default(0)
  multiplier                          Float           @default(1)
  multiplierExpiresAt                 DateTime?
  purchasedItems                      String[]        @default([])
  achievements                        String[]        @default([])
  bio                                 String          @default("")
  banner                              String          @default("https://aequus-posts.s3.us-west-2.amazonaws.com/uploads/1741861169744-banner.png")
  accounts                            Account[]
  Challenge_Challenge_creatorIdToUser Challenge[]     @relation("Challenge_creatorIdToUser")
  Challenge_Challenge_inviteeIdToUser Challenge[]     @relation("Challenge_inviteeIdToUser")
  Claim                               Claim[]
  Event                               Event[]
  factions                            Member[]
  comments                            Comment[]
  posts                               Post[]
  chats                                        Chat[]          @relation("UserChats") // participant in chats
  adminOf                                      Chat[]          @relation("ChatAdmin") // admin of chats
  messages                                     ChatMessage[]
  sentRequests                        FriendRequest[] @relation("SentRequests")
  receivedRequests                    FriendRequest[] @relation("ReceivedRequests")
   openChallenges OpenChallenge[] @relation("Creator")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Post {
  id             Int             @id @default(autoincrement())
  userId         String
  body           String
  postImage      String?
  visibility     String          @default("PUBLIC")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  likeIds        String[]
  comments       Comment[]
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model Comment {
  id           Int      @id @default(autoincrement())
  userId       String
  postId       Int
  body         String
  commentImage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Challenge {
  id                             String          @id @default(uuid())
  creatorId                      String
  inviteeId                      String
  status                         ChallengeStatus
  game                           String
  description                    String?
  rules                          Json
  createdAt                      DateTime        @default(now())
  acceptedAt                     DateTime?
  expiresAt                      DateTime
  completedAt                    DateTime?
  coins                          Int
  xp         Int      @default(0)
  claimTime                      DateTime?
  updatedAt                      DateTime        @default(now())
  winnerId                       String?
  User_Challenge_creatorIdToUser User            @relation("Challenge_creatorIdToUser", fields: [creatorId], references: [name])
  User_Challenge_inviteeIdToUser User            @relation("Challenge_inviteeIdToUser", fields: [inviteeId], references: [name])
  
  Claim                          Claim[]

}

model Claim {
  id          String    @id
  challengeId String
  claimantId  String
  claimedAt   DateTime  @default(now())
  Challenge   Challenge @relation(fields: [challengeId], references: [id])
  User        User      @relation(fields: [claimantId], references: [name])
}

model Event {
  prizePool             Float?
  Description           String
  authorId              String
  createdAt             DateTime @default(now())
  discordCommunityLink  String?
  eventPoster           String?
  game                  String
  gameProfileImage      String?
  isFreeToRegister      Boolean  @default(true)
  liveStreamLinks       String?
  maxParticipantAllowed Int
  name                  String
  registerAmount        Float?
  registerBefore        DateTime
  updatedAt             DateTime @default(now())
  usersRegistered       String[]
  id                    Int      @id @default(autoincrement())
  author                User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Faction {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  imageUrl    String?
  chatId      String?   @unique
  chat        Chat?     @relation(fields: [chatId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  members     Member[]
  isPrivate   Boolean @default(false)
}

model Member {
  id        String   @id @default(uuid())
  userId    String
  factionId String
  joinedAt  DateTime @default(now())
  coins     Int      @default(0)
  faction   Faction  @relation(fields: [factionId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, factionId])
}

model Game {
  id            String   @id @default(uuid())
  name          String   @unique
  imageUrl      String
  playersOnline Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model StoreItem {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  imageUrl    String?
  cost        Int
  type        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Achievement {
  id              String   @id @default(uuid())
  game            String
  achievementName String   @unique
  challenge       String
  description     String
  bannerImage     String   @default("https://aequus-posts.s3.us-west-2.amazonaws.com/uploads/1741861169744-banner.png")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model FriendRequest {
  id         String              @id @default(uuid())
  senderId   String
  receiverId String
  status     FriendRequestStatus @default(PENDING)
  createdAt  DateTime            @default(now())
  receiver   User                @relation("ReceivedRequests", fields: [receiverId], references: [id])
  sender     User                @relation("SentRequests", fields: [senderId], references: [id])

  @@unique([senderId, receiverId])
}

enum ChallengeStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  EXPIRED
  DISPUTED
  STARTING
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}


model OpenChallenge {
  id         String   @id @default(cuid())
  creatorId  String
  creator    User     @relation("Creator", fields: [creatorId], references: [id])
  game       String
  coins      Int
  xp         Int      @default(0)
  about      String?
  status     String   @default("OPEN") // OPEN, ACCEPTED, COMPLETED, CANCELLED
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Chat {
  id          String  @id @default(uuid())
  name        String
  isGroupChat Boolean @default(false)

  messages ChatMessage[] @relation("AllMessages")

  lastMessage   ChatMessage? @relation("LastMessage", fields: [lastMessageId], references: [id])
  lastMessageId String?      @unique

  participants User[]  @relation("UserChats")
  admin        User?   @relation("ChatAdmin", fields: [adminId], references: [id])
  adminId      String?

  faction      Faction? 
  factionId    String?  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatMessage {
  id       String @id @default(uuid())
  content  String
  sender   User   @relation(fields: [senderId], references: [id])
  senderId String

  lastMessageOfChat Chat? @relation("LastMessage")

  chat   Chat   @relation("AllMessages", fields: [chatId], references: [id])
  chatId String

  attachments MessageAttachment[] // 1-to-many relation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MessageAttachment {
  id  String @id @default(uuid())
  url String
  key String // S3 key for deletion

  message   ChatMessage @relation(fields: [messageId], references: [id])
  messageId String
}